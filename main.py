#!/usr/bin/env python3

from aiogram import Bot, Dispatcher, F
from aiogram.types import (Message, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice, PreCheckoutQuery,
                           CallbackQuery)
from aiogram.utils.markdown import hbold, hlink

from babel.numbers import get_currency_symbol
from asyncio import run as async_run
from asyncio import sleep as asleep
from asyncio import gather, get_event_loop, create_task, CancelledError, all_tasks, current_task
from time import time as unixtime
from dotenv import dotenv_values
from applib.strings import *
from applib import *
from aiopg import Cursor
from random import randint
from typing import Dict
from signal import SIGINT, SIGTERM

from os import environ
from google.cloud import dialogflow
from google.api_core.exceptions import InvalidArgument
from google.oauth2 import service_account

with open(dialog_flow_file) as f:
    environ["GOOGLE_APPLICATION_CREDENTIALS"] = str(dialog_flow_file)
    DIALOGFLOW_PROJECT_ID = "small-talk-rwvf"
    DIALOGFLOW_LANGUAGE_CODE = 'ru'
    SESSION_ID = 'me'
credentials = service_account.Credentials.from_service_account_file(dialog_flow_file)

sessionClient = dialogflow.SessionsClient(credentials=credentials)

secrets: Dict[str, str | None] = dotenv_values('.env')
TOKEN: str = secrets["BOT_TOKEN"]  # type: ignore

bot: Bot = Bot(TOKEN)
dp = Dispatcher(bot=bot)

# TelegramBot = require('node-telegram-bot-api');
# sqlite3 = require('sqlite3').verbose();
# dialogflow = require('@google-cloud/dialogflow').v2beta1;

# const sharp = require('sharp');
#  const fs = require('fs')

event_coin_path = './rate.txt'
# logf(chatCompletion.choices[0].message.content);

payment_token = "284685063:TEST:Y2YxMWE3NmJkODRh"

admins_id = [1432248216, 1300210900]
# credentials = require('./key.json')

projectId = 'small-talk-rwvf'

vid250 = './250videocards.png'

clans = ("–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",)

lastToId = 0

startTime = unixtime()
cooldownPeriod = 5000


# region ----- Without using DB
@dp.message(F.text.regexp(r'^(\/start|–º–µ–Ω—é)(\s|$)'))
async def start(message: Message):
    user_name = message.from_user.first_name

    try:
        await message.reply(
            start_text(user_name),
            allow_sending_without_reply=True,
            parse_mode="markdown",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=start_keyboard(InlineKeyboardButton))
        )
    except Exception as e:
        await logf(e)
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n <code>{e}</code>",
                            allow_sending_without_reply=True,
                            parse_mode='HTML')


@dp.message(F.text.regexp(r'^(\/ping|–ø–∏–Ω–≥)(\s|$)'))
async def ping(message: Message):
    start_time = unixtime()
    try:

        reply_message = await bot.send_message(message.chat.id, 'üîÑ *–ü–∏–Ω–≥...*')
        end_time = unixtime()
        ping_time = round((end_time - start_time) * 1000, 2)
        await bot.edit_message_text(
            f"üöÄ *–ü–æ–Ω–≥!*  \nüí° *–ó–∞–¥–µ—Ä–∂–∫–∞:* {ping_time}ms",
            chat_id=message.chat.id,
            message_id=reply_message.message_id,
            parse_mode="markdown")
    except Exception as e:
        await bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


@dp.message(F.text.startswith("/test") | F.text.lower().startswith('—Ç–µ—Å—Ç'))
async def test(message: Message):
    await bot.send_message(message.chat.id, f"–¢–µ—Å—Ç –≤—ã–≤–æ–¥: {1}")


@dp.message(F.text.regexp(r'^(\/donate|–¥–æ–Ω–∞—Ç)(\s|$)'))
async def donate(message: Message):
    try:
        assert message.from_user is not None
        user_id = message.from_user.id
        user_name = message.from_user.first_name
        if await check_flood_wait(user_id):
            warning = await message.reply(
                f'üö´ <a href="tg://user?id={user_id}">{user_name}</a>, –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.',
                parse_mode="HTML"
            )
            await asleep(3)
            await bot.delete_message(warning.chat.id, warning.message_id)
            return

        await message.reply(
            donate_text(),
            allow_sending_without_reply=True,
            parse_mode="markdown",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=donate_keyboard(InlineKeyboardButton, prices)
            )
        )

    except Exception as e:
        await bot.edit_message_text(
            f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n{e}',
            chat_id=message.chat.id,
            message_id=message.message_id,
        )
        await logf(e)


@dp.message(F.text.regexp(r'^(\/shop|–º–∞–≥–∞–∑–∏–Ω)(\s|$)'))
async def shop(message: Message):
    assert message.from_user is not None
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    ecoin = await ecoin_to_bucks(1)

    if await check_flood_wait(user_id):
        warning = await message.reply(
            f'üö´ <a href="tg://user?id={user_id}">{user_name}</a>, '
            f'–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.',
            parse_mode="HTML"
        )
        await asleep(3)
        await bot.delete_message(warning.chat.id, warning.message_id)
        return

    try:
        await message.reply(
            start_text(user_name),
            allow_sending_without_reply=True,
            parse_mode="markdown",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=shop_keyboard(InlineKeyboardButton, ecoin)
            )
        )
    except Exception as e:
        await logf(e)
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n <code>{e}</code>",
                            allow_sending_without_reply=True,
                            parse_mode='HTML')


@dp.message(F.text.regexp(r'(?i)^(\/rate|–∫—É—Ä—Å|–µ–∫–æ–∏–Ω)(\s|$)'))
async def show_rate(message: Message):
    rate = await ecoin_to_bucks(1)
    await message.reply(
        rate_text(rate),
        allow_sending_without_reply=True,
        parse_mode='HTML'
    )
# endregion


# region ----- With using DB
@dp.message(F.text.regexp(r'^(\/cash|–±–∞–ª–∞–Ω—Å)(\s|$)'))
@with_db(True)
async def get_cash(cur: Cursor, load: Message, message: Message):
    try:
        assert message.from_user is not None
        user_id = message.from_user.id
        user_name = message.from_user.first_name
        if await check_flood_wait(user_id):
            await bot.edit_message_text(
                f'üö´ <a href="tg://user?id={user_id}">{user_name}</a>, –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.',
                chat_id=load.chat.id,
                message_id=load.message_id,
                parse_mode="HTML"
            )
            await asleep(3)
            await bot.delete_message(load.chat.id, load.message_id)
            return

        await cur.execute(
            "SELECT cash, goldfevervalue, bitcoins FROM users WHERE id=%s",
            (user_id,))

        row = await cur.fetchone()

        if row is None:
            await bot.edit_message_text(
                "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                chat_id=load.chat.id,
                message_id=load.message_id)
            return

        if not await check_account(cur, message):
            return

        cash = format_num(row["cash"])
        ecoin = format_num(row["bitcoins"])

        cash_text = f"{cash} $"
        ecoins_text = f"{ecoin} ‚Ç†"

        await bot.edit_message_text(balance_text(cash_text, ecoins_text),
                                    chat_id=load.chat.id,
                                    message_id=load.message_id,
                                    parse_mode="markdown")

    except Exception as e:
        await bot.send_message(message.chat.id,
                               f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n <code>{e}</code>",
                               parse_mode='HTML')
        raise e


@dp.message(F.text.regexp(r'^(\/farming|—Ñ–∞—Ä–º)(\s|$)'))
@with_db(True)
async def farm(cur: Cursor, load: Message, message: Message):
    try:
        assert message.from_user is not None
        user_id = message.from_user.id
        user_name = message.from_user.first_name

        if await check_flood_wait(user_id):
            await bot.edit_message_text(
                f'üö´ <a href="tg://user?id={user_id}">{user_name}</a>, –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.',
                chat_id=load.chat.id,
                message_id=load.message_id,
                parse_mode="HTML"
            )
            await asleep(3)
            await bot.delete_message(load.chat.id, load.message_id)
            return

        await cur.execute(
            "SELECT isvip, videocards, last_farming_time FROM users WHERE id = %s",
            (message.from_user.id,))
        row = await cur.fetchone()

        if not await check_account(cur, message):
            return

        is_vip = vip_rangs[row['isvip']]
        videocards: int = row['videocards']

        last_farming_time = row['last_farming_time']
        time_now = unixtime()

        if time_now - last_farming_time < farming_timers[row['isvip']]:
            time_to_use = farming_timers[row['isvip']] - (time_now - last_farming_time)

            await bot.edit_message_text(farm_text_failure(time_to_use),
                                        chat_id=load.chat.id,
                                        message_id=load.message_id,
                                        parse_mode="markdown")
            return

        random_cash = int(randint(1000, 10000))
        random_cash *= multiplies[row['isvip']]
        random_cash *= videocards if videocards else 1

        multiply_text = multiplies[row['isvip']] * videocards
        text_video = videocards if videocards else '–ù–µ—Ç. \nüí†–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —è–¥—Ä–æ.'

        rate, farmed_amount = await read_eventcoin()
        cryptocoins = random_cash / rate

        farmed_amount += random_cash
        await write_eventcoin(rate, farmed_amount)

        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.edit_message_text(farm_text_success(cryptocoins, is_vip,
                                                      str(text_video),
                                                      multiply_text),
                                    chat_id=load.chat.id,
                                    message_id=load.message_id,
                                    parse_mode="markdown")
        await logf(
            f"{message.from_user.first_name} - {format_time(int(time_now))}, Link - 'tg://user?id={message.from_user.id}"
        )
        await cur.execute(
            'UPDATE users SET last_farming_time = %s, bitcoins = bitcoins + %s WHERE id = %s',
            (time_now, cryptocoins, message.from_user.id))

    except Exception as e:
        await bot.edit_message_text(
            f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n{e}',
            chat_id=load.chat.id,
            message_id=load.message_id,
        )
        await logf(e)


@dp.message(F.text.regexp(r'(?i)^(\/rich_top|—Ç–æ–ø –±–æ–≥–∞—á–µ–π|—Ç–æ–ø –±–æ–≥–∞—Ç—ã—Ö|–±–æ–≥–∞—Ç—ã–µ)(\s|$)'))
@with_db(True)
async def rich_top(cur, load: Message, message: Message):
    try:
        assert message.from_user is not None
        user_id = message.from_user.id
        user_name = message.from_user.first_name
        if await check_flood_wait(user_id):
            await bot.edit_message_text(
                f'üö´ <a href="tg://user?id={user_id}">{user_name}</a>, –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.',
                chat_id=load.chat.id,
                message_id=load.message_id,
                parse_mode="HTML"
            )
            await asleep(3)
            await bot.delete_message(load.chat.id, load.message_id)
            return

        await cur.execute("SELECT name, cash, id, tag FROM users ORDER BY cash DESC LIMIT 10")
        users_row = await cur.fetchall()
        keyboard = top_keyboard(users_row, InlineKeyboardButton, "$")

        await bot.edit_message_text(
            rich_text(),
            chat_id=load.chat.id,
            message_id=load.message_id,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=keyboard
            )
        )

    except Exception as e:
        await bot.edit_message_text(
            f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n{e}',
            chat_id=load.chat.id,
            message_id=load.message_id,
        )
        await logf(e)


@dp.message(F.text.regexp(r'(?i)^(\/crypto_top|—Ç–æ–ø –∫—Ä–∏–ø—Ç–∞|—Ç–æ–ø –º–∞–π–Ω–µ—Ä—ã|–º–∞–π–Ω–µ—Ä—ã)(\s|$)'))
@with_db(True)
async def rich_top(cur, load: Message, message: Message):
    try:
        assert message.from_user is not None
        user_id = message.from_user.id
        user_name = message.from_user.first_name
        if await check_flood_wait(user_id):
            await bot.edit_message_text(
                f'üö´ <a href="tg://user?id={user_id}">{user_name}</a>, –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.',
                chat_id=load.chat.id,
                message_id=load.message_id,
                parse_mode="HTML"
            )
            await asleep(3)
            await bot.delete_message(load.chat.id, load.message_id)
            return

        await cur.execute("SELECT name, bitcoins, id, tag FROM users ORDER BY bitcoins DESC LIMIT 10")
        users_row = await cur.fetchall()
        keyboard = top_keyboard(users_row, InlineKeyboardButton, "‚Ç†")

        await bot.edit_message_text(
            crypto_text(),
            chat_id=load.chat.id,
            message_id=load.message_id,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=keyboard
            )
        )

    except Exception as e:
        await bot.edit_message_text(
            f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n{e}',
            chat_id=load.chat.id,
            message_id=load.message_id,
        )
        await logf(e)


@dp.message(F.text.regexp(r'(?i)^(\/dice|–∫—É–±–∏–∫|–∫–æ—Å—Ç–∏)(\s|$)'))
@with_db(True)
async def dice(cur, load: Message, message: Message):
    try:
        assert message.from_user is not None
        user_id = message.from_user.id
        first_name = message.from_user.first_name

        await cur.execute("SELECT cash FROM users WHERE id = %s", (user_id,))
        user = await cur.fetchone()

        if not await check_account(cur, message):
            return

        balance = user['cash']

        if await check_flood_wait(user_id):
            warning = await message.reply(
                f"üö´ <a href=tg://user?id={user_id}>{first_name}</a>, –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.",
                parse_mode="HTML"
            )
            await asleep(3)
            await bot.delete_message(warning.chat.id, warning.message_id)
            return

        try:
            parts = message.text.split()
            bid = int(parts[1])
            dice_value = int(parts[2])

            if not await validate_bid(bid, balance):
                if bid < 10:
                    await send_error_reply(
                        message,
                        "‚ö†Ô∏è *–û—à–∏–±–∫–∞!* \n–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 10!",
                        f"{message.text.split(' ')[0]} [—Å—Ç–∞–≤–∫–∞] [1-6]"
                    )
                    await bot.delete_message(
                        chat_id=load.chat.id,
                        message_id=load.message_id,
                    )
                else:
                    await bot.edit_message_text(
                        "üö´ *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!* üí∏\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–µ—Å–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ —Å–≤–æ–π —Å—á—ë—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É.",
                        chat_id=load.chat.id,
                        message_id=load.message_id,
                        parse_mode="markdown"
                    )
                return

            if not await validate_dice_value(dice_value):
                await send_error_reply(
                    message,
                    "‚ö†Ô∏è *–û—à–∏–±–∫–∞!* \n–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 6! üé≤",
                    f"{message.text.split(' ')[0]} [—Å—Ç–∞–≤–∫–∞] [1-6]"
                )
                await bot.delete_message(
                    chat_id=load.chat.id,
                    message_id=load.message_id,
                )
                return

        except (IndexError, ValueError):
            await message.reply(
                "‚ö†Ô∏è *–û—à–∏–±–∫–∞!* \n"
                "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É –∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6! üéØ\n"
                f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `{message.text.split(' ')[0]} [—Å—Ç–∞–≤–∫–∞] [1-6]`",
                parse_mode="markdown"
            )
            return

        try:
            await bot.delete_message(
                load.chat.id,
                load.message_id
            )
            spin = await bot.send_dice(
                message.chat.id,
                emoji="üé≤",
                allow_sending_without_reply=True,
                reply_to_message_id=message.message_id
            )
            value = spin.dice.value

            if value == dice_value:
                result_text = f"üéâ *–í–µ–∑–µ–Ω–∏–µ!* \n\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: +{bid}üí∏\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å —Ç–µ–ø–µ—Ä—å: {format_num(balance + bid)}$"
                await cur.execute(
                    "UPDATE users SET cash = cash + %s WHERE id = %s",
                    (bid, user_id)
                )
            else:
                result_text = f"üòû *–ú–∏–º–æ!* \n\n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏: -{bid}üí∏\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å —Ç–µ–ø–µ—Ä—å: {format_num(balance - bid)}$"
                await cur.execute(
                    "UPDATE users SET cash = cash - %s WHERE id = %s",
                    (bid, user_id)
                )

            await asleep(4)

            await bot.send_message(
                message.chat.id,
                result_text,
                allow_sending_without_reply=True,
                reply_to_message_id=spin.message_id,
                parse_mode="markdown"
            )

        except Exception as e:
            await message.reply(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n<code>{e}</code>",
                parse_mode='HTML'
            )
    except Exception as e:
        await bot.edit_message_text(
            f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n{e}',
            chat_id=load.chat.id,
            message_id=load.message_id,
        )
        await logf(e)


@dp.message(F.text.regexp(r'(?i)^(\/basketball|\/darts|\/football|\/bowling|–±–∞—Å–∫–µ—Ç–±–æ–ª|–¥–∞—Ä—Ç—Å|—Ñ—É—Ç–±–æ–ª|–±–æ—É–ª–∏–Ω–≥)(\s|$)'))
@with_db(True)
async def game_handler(cur, load: Message, message: Message):
    try:
        assert message.from_user is not None
        user_id = message.from_user.id

        await cur.execute("SELECT cash FROM users WHERE id = %s", (user_id,))
        user = await cur.fetchone()

        if not await check_account(cur, message):
            return

        balance = user['cash']

        if await check_flood_wait(user_id):
            warning = await message.reply(
                "üö´ –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.",
                parse_mode="markdown"
            )
            await asleep(3)
            await bot.delete_message(warning.chat.id, warning.message_id)
            return

        try:
            await bot.delete_message(
                load.chat.id,
                load.message_id
            )
            bid = int(message.text.split()[1])

            if bid < 10:
                await send_error_reply(
                    message,
                    "‚ö†Ô∏è *–û—à–∏–±–∫–∞!* \n–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 10!",
                    f"{message.text.split(' ')[0]} [—Å—Ç–∞–≤–∫–∞]"
                )
                return

            if bid > balance:
                await message.reply(
                    "üö´ *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!* üí∏\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á—ë—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É.",
                    parse_mode="markdown"
                )
                return

        except (IndexError, ValueError):
            await message.reply(
                "‚ö†Ô∏è *–û—à–∏–±–∫–∞!* \n–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É –∫–∞–∫ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!\n"
                f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `{message.text.split(' ')[0]} [—Å—Ç–∞–≤–∫–∞]`",
                parse_mode="markdown"
            )
            return

        try:
            emoji = await get_emoji(message.text.split(' ')[0])
            spin = await bot.send_dice(
                message.chat.id,
                emoji=emoji,
                allow_sending_without_reply=True,
                reply_to_message_id=message.message_id
            )
            value = spin.dice.value
            emoji = spin.dice.emoji

            obtaining, nb = await get_result(emoji, value, bid, balance)

            await asleep(4)
            await cur.execute(
                "UPDATE users SET cash = cash + %s WHERE id = %s",
                (bid, user_id)
            )
            await bot.send_message(
                message.chat.id,
                obtaining,
                reply_to_message_id=spin.message_id,
                parse_mode="markdown"
            )

        except Exception as e:
            await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n <code>{e}</code>", parse_mode='HTML')

    except Exception as e:
        await bot.edit_message_text(
            f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n{e}',
            chat_id=load.chat.id,
            message_id=load.message_id,
        )
        await logf(e)


@dp.message(F.text.regexp(r'(?i)^(\/profile|–ø—Ä–æ—Ñ–∏–ª—å)(\s|$)'))
@with_db(True)
async def profile(cur: Cursor, load: Message, message: Message):
    try:
        assert message.from_user is not None
        user_id = message.from_user.id
        user_name = message.from_user.first_name
        if await check_flood_wait(user_id):
            await bot.edit_message_text(
                f'üö´ <a href="tg://user?id={user_id}">{user_name}</a>, –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.',
                chat_id=load.chat.id,
                message_id=load.message_id,
                parse_mode="HTML"
            )
            await asleep(3)
            await bot.delete_message(load.chat.id, load.message_id)
            return

        if message.entities and len(message.entities) > 1 and message.entities[1].type == "mention":
            username = message.text[
                       message.entities[1].offset + 1:message.entities[1].offset + message.entities[1].length]
            user_query = "SELECT name, id, cash, isvip, videocards, clan, tag, bitcoins FROM users WHERE mention = %s"
            user_param = (username,)
        elif message.reply_to_message:
            user_id = message.reply_to_message.from_user.id
            user_query = "SELECT name, id, cash, isvip, videocards, clan, tag, bitcoins FROM users WHERE id = %s"
            user_param = (user_id,)
        else:
            await bot.edit_message_text(
                "‚ùóÔ∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!",
                chat_id=load.chat.id,
                message_id=load.message_id,
                parse_mode="HTML"
            )
            return

        await cur.execute(user_query, user_param)
        user = await cur.fetchone()

        if not user:
            await message.reply(
                "‚ùå –£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞!",
                allow_sending_without_reply=True
            )
            return

        if user["clan"] == 0:
            current_clan = "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        else:
            await cur.execute("SELECT name FROM clans WHERE owner=  %s", (user["clan"],))
            clan_data = await cur.fetchone()
            current_clan = clan_data["name"] if clan_data else "–Ω–µ—Ç"

        user_name = message.reply_to_message.from_user.first_name if message.reply_to_message else f"@{username}"
        link = hlink(user_name, f'tg://user?id={user['id']}')
        """profile_result = (
            f"üë§ {hlink(user_name, f'tg://user?id={user['id']}')}"
            f"\n<b>–ü—Ä–æ—Ñ–∏–ª—å</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {hbold(user['name'])}: \n"
            f"\nüè∞ –ö–ª–∞–Ω: {hbold(current_clan)}"
            f"\nüè∑ –ü—Ä–µ—Ñ–∏–∫—Å: {hbold(user['tag'])}"
            f"\nüìá –ü—Å–µ–≤–¥–æ–Ω–∏–º: {hbold(user['name'])}"
            f"\nüÜî ID: {user['id']}"
            f"\nüíµ –ë–∞–ª–∞–Ω—Å: {format_num(user['cash'])}$"
            f"\nüí≥ ECoins: {format_num(user['bitcoins'])}‚Ç†"
            f"\nüñ• –í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã: {user['videocards']} —à—Ç."
            f"\nü™™ –ü—Ä–æ–ø—É—Å–∫: {vip_rangs[user['isvip']]}"
        )"""
        profile_result = profile_text(hlink(user_name, f'tg://user?id={user['id']}'), hbold, user, current_clan)

        invite_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úâÔ∏è –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –∫–ª–∞–Ω", callback_data=f"clan_invite_{user['id']}")]
            ] if user["clan"] == 0 else [
                [InlineKeyboardButton(text=f"üè∞ {current_clan}", callback_data=f"clan_show_info_{user["clan"]}")]
            ]
        )

        await bot.edit_message_text(
            profile_result,
            chat_id=load.chat.id,
            message_id=load.message_id,
            parse_mode="HTML",
            reply_markup=invite_keyboard
        )

    except Exception as e:
        await bot.edit_message_text(
            f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n{e}',
            chat_id=load.chat.id,
            message_id=load.message_id,
        )
        await logf(e)


@dp.message(F.text.regexp(r'(?i)^(\/clans|–∫–ª–∞–Ω—ã)(\s|$)'))
@with_db(True)
async def top_clans(cur: Cursor, load: Message, message: Message):
    try:
        assert message.from_user is not None
        user_id = message.from_user.id
        user_name = message.from_user.first_name
        if await check_flood_wait(user_id):
            await bot.edit_message_text(
                f'üö´ <a href="tg://user?id={user_id}">{user_name}</a>, –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.',
                chat_id=load.chat.id,
                message_id=load.message_id,
                parse_mode="HTML"
            )
            await asleep(3)
            await bot.delete_message(load.chat.id, load.message_id)
            return

        await cur.execute("SELECT name, money, type, owner FROM clans ORDER BY money DESC LIMIT 10")
        clans_row = await cur.fetchall()
        keyboard = clans_keyboard(clans_row, InlineKeyboardButton)

        await bot.edit_message_text(
            clans_text(),
            chat_id=load.chat.id,
            message_id=load.message_id,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=keyboard
            )
        )

    except Exception as e:
        await bot.edit_message_text(
            f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n{e}',
            chat_id=load.chat.id,
            message_id=load.message_id,
        )
        await logf(e)


@dp.message(F.text.regexp(r'(?i)^(\/clan|–∫–ª–∞–Ω|–º–æ–π –∫–ª–∞–Ω)(\s|$)'))
@with_db(True)
async def clan(cur: Cursor, load: Message, message: Message):
    try:
        assert message.from_user is not None
        user_id = message.from_user.id
        user_name = message.from_user.first_name
        if await check_flood_wait(user_id):
            await bot.edit_message_text(
                f'üö´ <a href="tg://user?id={user_id}">{user_name}</a>, –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.',
                chat_id=load.chat.id,
                message_id=load.message_id,
                parse_mode="HTML"
            )
            await asleep(3)
            await bot.delete_message(load.chat.id, load.message_id)
            return

        if not await check_account(cur, message):
            return

        await cur.execute("SELECT clan FROM users WHERE id = %s", (message.from_user.id,))
        user = await cur.fetchone()
        await cur.execute("SELECT name, id FROM users WHERE id = %s", (user["clan"],))
        owner_row = await cur.fetchone()
        await cur.execute("SELECT * FROM clans WHERE owner = %s", (user["clan"],))
        clan_row = await cur.fetchone()

        owner_link = hlink(owner_row["name"], f'tg://user?id={owner_row["id"]}')
        members = await get_clan_members(clan_id=clan_row['owner'])
        keyboard = clan_keyboard(clan_row, InlineKeyboardButton)

        await bot.edit_message_text(
            clan_text(clan_row, owner_link, members),
            chat_id=load.chat.id,
            message_id=load.message_id,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=keyboard
            )
        )

    except Exception as e:
        await bot.edit_message_text(
            f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n{e}',
            chat_id=load.chat.id,
            message_id=load.message_id,
        )
        await logf(e)


@dp.message(F.text.regexp(r'(?i)^(\/buyCrypto|–∫—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç—É|–∫—É–ø–∏—Ç—å –µ–∫–æ–∏–Ω)(\s|$)'))
@with_db(True)
async def buy_crypto(cur: Cursor, load: Message, message: Message):
    try:
        ecoins = int(message.text.split()[1])
    except (ValueError, IndexError):
        await bot.edit_message_text(
            text="‚ùå –í–≤–µ–¥–µ–Ω–Ω–æ–µ –≤–∞–º–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º!",
            chat_id=load.chat.id,
            message_id=load.message_id
        )
        return
    try:
        if ecoins <= 0:
            await bot.edit_message_text(
                text="‚ùå –ù–µ–ª—å–∑—è –ø—Ä–æ–¥–∞—Ç—å —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ –Ω—É–ª—é!",
                chat_id=load.chat.id,
                message_id=load.message_id
            )
            return

        bucks = await ecoin_to_bucks(ecoins)

        user_id = message.from_user.id
        await cur.execute("SELECT cash, bitcoins FROM users WHERE id=%s", (user_id,))
        row = await cur.fetchone()

        if not await check_account(cur, message):
            return

        cash, bitcoins = row
        if bucks > cash:
            await bot.edit_message_text(
                text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ ECoin!",
                chat_id=load.chat.id,
                message_id=load.message_id
            )
            return

        await cur.execute(
            "UPDATE users SET cash = cash-%s, bitcoins = bitcoins+%s WHERE id=%s",
            (bucks, ecoins, user_id)
        )

        rate, farmed_amount = await read_eventcoin()
        farmed_amount += bucks
        await write_eventcoin(rate, farmed_amount)

        await bot.edit_message_text(
            text=f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–æ {format_num(ecoins)}‚Ç† –∑–∞ {format_num(int(bucks))}$!",
            chat_id=load.chat.id,
            message_id=load.message_id,
            parse_mode="HTML"
        )

    except Exception as e:
        await bot.edit_message_text(
            f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n{e}',
            chat_id=load.chat.id,
            message_id=load.message_id,
        )
        await logf(e)


@dp.message(F.text.regexp(r'(?i)^(\/sellCrypto|–ø—Ä–æ–¥–∞—Ç—å –∫—Ä–∏–ø—Ç—É|–ø—Ä–æ–¥–∞—Ç—å –µ–∫–æ–∏–Ω)(\s|$)'))
@with_db(True)
async def sell_crypto(cur: Cursor, load: Message, message: Message):
    try:
        ecoins = int(message.text.split()[1])
    except (ValueError, IndexError):
        await bot.edit_message_text(
            text="‚ùå –í–≤–µ–¥–µ–Ω–Ω–æ–µ –≤–∞–º–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º!",
            chat_id=load.chat.id,
            message_id=load.message_id
        )
        return

    try:
        if ecoins <= 0:
            await bot.edit_message_text(
                text="‚ùå –ù–µ–ª—å–∑—è –ø—Ä–æ–¥–∞—Ç—å —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ –Ω—É–ª—é!",
                chat_id=load.chat.id,
                message_id=load.message_id
            )
            return

        bucks = await ecoin_to_bucks(ecoins)

        user_id = message.from_user.id
        await cur.execute("SELECT cash, bitcoins FROM users WHERE id=%s", (user_id,))
        row = await cur.fetchone()

        if not await check_account(cur, message):
            return

        cash, bitcoins = row
        if ecoins > bitcoins:
            await bot.edit_message_text(
                text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ ECoin!",
                chat_id=load.chat.id,
                message_id=load.message_id
            )
            return

        await cur.execute(
            "UPDATE users SET cash = cash+%s, bitcoins = bitcoins-%s WHERE id=%s",
            (bucks, ecoins, user_id)
        )

        rate, farmed_amount = await read_eventcoin()
        farmed_amount -= bucks
        await write_eventcoin(rate, farmed_amount)

        await bot.edit_message_text(
            text=f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–Ω–æ {format_num(ecoins)}‚Ç† –∑–∞ {format_num(int(bucks))}$!",
            chat_id=load.chat.id,
            message_id=load.message_id,
            parse_mode="HTML"
        )

    except Exception as e:
        await bot.edit_message_text(
            f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n{e}',
            chat_id=load.chat.id,
            message_id=load.message_id,
        )
        await logf(e)


@dp.message(F.successful_payment)
@with_db(True)
async def got_payment(cur: Cursor, load: Message, message: Message):
    try:
        payment = message.successful_payment
        currency = get_currency_symbol(payment.currency, locale="en")
        payload = payment.invoice_payload
        quantity = payload.split(' ')[0]

        await cur.execute(
            'UPDATE users SET videocards = videocards + %s WHERE id = %s',
            (int(quantity), message.from_user.id))

        await bot.edit_message_text(
            text=f'‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! \n\n'
                 f'üßæ *–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞* \n'
                 f'üì¶ –¢–æ–≤–∞—Ä: {payment.invoice_payload}\n'
                 f'üí∞ –¶–µ–Ω–∞: {payment.total_amount / 100}{currency}\n\n'
                 f'üîÑ –í–∞—à –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω.',
            chat_id=load.chat.id,
            message_id=load.message_id,
            parse_mode='Markdown'
        )
    except Exception as e:
        await bot.edit_message_text(
            f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n{e}',
            chat_id=load.chat.id,
            message_id=load.message_id,
        )
        await logf(e)


# endregion


# region ----- Payments query
@dp.pre_checkout_query(lambda query: True)
@with_db(True)
async def checkout(cur: Cursor, loading: Message, pre_checkout_query: PreCheckoutQuery, *args: Any, **kwargs: Any):
    try:
        assert pre_checkout_query.from_user is not None
        await cur.execute(
            "SELECT cash, goldfevervalue, bitcoins FROM users WHERE id=%s",
            (pre_checkout_query.from_user.id,))

        row = await cur.fetchone()

        if row is None:
            await bot.answer_pre_checkout_query(
                pre_checkout_query.id,
                ok=False,
                error_message=f'üö´ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! \n–ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±—É—é –∏–≥—Ä–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞.'
            )
            return

        if not await check_account(cur, pre_checkout_query):
            return

        await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

    except Exception as e:
        await bot.answer_pre_checkout_query(
            pre_checkout_query.id,
            ok=False,
            error_message=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n {e}"
        )
        raise e


# endregion


# region ----- Callback query
@dp.callback_query(lambda c: c.data.startswith('donatevid'))
async def donate_videocards(callback: CallbackQuery):
    vid_id = callback.data.split('donatevid')[1]
    price = filter_dict(prices, vid_id)
    await bot.answer_callback_query(callback.id)
    await bot.send_invoice(
        callback.message.chat.id, title=f"üñ• {price.label}",
        description='–ö—É–ø–∏ –±–æ–ª—å—à–µ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç –¥–ª—è —Å–≤–æ–µ–π –º–∞–π–Ω–∏–Ω–≥ —Ñ–µ—Ä–º—ã –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –ª–∏–º–∏—Ç!',
        # provider_token='410694247:TEST:d26cecc4-1321-4cb9-b23f-b385f5d0594f',
        currency='XTR',
        prices=[price],
        start_parameter=f'vid{vid_id}',
        payload=price.label
    )


@dp.callback_query(lambda c: c.data == 'commands')
async def list_commands(callback: CallbackQuery):
    user = callback.from_user
    list_message = f'üöÄ <a href="tg://user?id={user.id}">{user.first_name}</a> –≤—ã–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.\n\n'
    for command in commands:
        head = command.split("-")[0]
        value = command.split("-")[1]
        list_message += f"‚Ä£ <b>{head}</b> - {value}\n"
    await callback.message.reply(
        list_message,
        allow_sending_without_reply=True,
        parse_mode='html'
    )


@dp.callback_query(lambda c: c.data.startswith('buyvid'))
@with_db(lambda c: len(c.data.split('_')) > 1)
async def buy_videocards(cur: Cursor, load: Message, callback: CallbackQuery, *args: Any, **kwargs: Any):
    try:
        assert callback.from_user is not None
        await cur.execute(
            "SELECT videocards FROM users WHERE id=%s",
            (callback.from_user.id,))

        row = await cur.fetchone()

        if row is None:
            await bot.edit_message_text(
                "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                chat_id=load.chat.id,
                message_id=load.message_id)
            return

        if not await check_account(cur, callback):
            return

        link = f'<a href="tg://user?id={callback.from_user.id}">{callback.from_user.first_name}</a>'
        vid_value = None
        if len(callback.data.split('_')) > 1:
            vid_value = callback.data.split('_')[1]
            user_id = int(callback.data.split('_')[2])
            if callback.from_user.id != user_id:
                await bot.answer_callback_query(
                    callback.id,
                    "‚õîÔ∏è –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–µ –¥–ª—è –í–∞—Å!",
                    show_alert=True
                )
            else:
                await bot.edit_message_text(
                    text=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {vid_value}",
                    chat_id=load.chat.id,
                    message_id=load.message_id,
                    parse_mode='html'
                )
        else:
            await bot.edit_message_text(
                text=videocards_text_select(link),
                chat_id=load.chat.id,
                message_id=load.message_id,
                parse_mode='html',
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=videocards_keyboard(InlineKeyboardButton, factor, row["videocards"],
                                                        callback.from_user.id)
                )
            )

        await bot.answer_callback_query(callback.id)
    except Exception as e:
        await bot.send_message(
            callback.message.chat.id,
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n <code>{e}</code>",
            parse_mode='HTML'
        )
        raise e


@dp.callback_query(lambda c: c.data == 'decor')
async def decoration(callback: CallbackQuery):
    await bot.answer_callback_query(callback.id)


@dp.callback_query(lambda c: c.data.startswith('clan'))
@with_db(lambda c: c.message.chat.type != "private")
async def clan_handler(cur, load: Message, callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞–Ω–µ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
    try:
        assert callback.from_user is not None
        option = callback.data.split('_')[1]
        target_id = int(callback.data.split('_')[3]) if option == "show" else None
        load = callback.message if callback.message.chat.type == "private" else load
        if option == "show":
            await cur.execute("SELECT name, id FROM users WHERE id = %s", (target_id,))
            owner_row = await cur.fetchone()
            if not owner_row:
                await bot.edit_message_text(
                    "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è.",
                    chat_id=load.chat.id,
                    message_id=load.message_id
                )
                return
            await handle_clan_show(cur, load, callback, bot, owner_row)
        else:
            await bot.answer_callback_query(
                callback.id,
                "‚õîÔ∏è –ù–µ–≤–µ—Ä–Ω–∞—è –æ–ø—Ü–∏—è!",
                show_alert=True
            )
            await bot.delete_message(
                chat_id=load.chat.id,
                message_id=load.message_id
            )

        await bot.answer_callback_query(callback.id)

    except Exception as e:
        await bot.send_message(
            callback.message.chat.id,
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n<code>{e}</code>",
            parse_mode="HTML"
        )
        raise e


@dp.callback_query(lambda c: c.data.startswith('profile'))
@with_db(lambda c: c.message.chat.type != "private")
async def profile_handler(cur, load: Message, callback: CallbackQuery):
    try:
        assert callback.from_user is not None
        target_id = int(callback.data.split('_')[1])
        load = callback.message if callback.message.chat.type == "private" else load
        await cur.execute("SELECT name, id, cash, isvip, videocards, clan, tag, bitcoins FROM users WHERE id = %s",
                          (target_id,))
        user = await cur.fetchone()

        if not user:
            await load.reply(
                "‚ùå –£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞!",
                allow_sending_without_reply=True
            )
            return

        if user["clan"] == 0:
            current_clan = "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        else:
            await cur.execute("SELECT name FROM clans WHERE owner=  %s", (user["clan"],))
            clan_data = await cur.fetchone()
            current_clan = clan_data["name"] if clan_data else "–Ω–µ—Ç"

        invite_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úâÔ∏è –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –∫–ª–∞–Ω", callback_data=f"clan_invite_{user['id']}")]
            ] if user["clan"] == 0 else [
                [InlineKeyboardButton(text=f"üè∞ {current_clan}", callback_data=f"clan_show_info_{user["clan"]}")]
            ]
        )

        link = hlink(user["name"], f'tg://user?id={user['id']}')

        await bot.edit_message_text(
            profile_text(link, hbold, user, current_clan),
            chat_id=load.chat.id,
            message_id=load.message_id,
            parse_mode="HTML",
            reply_markup=invite_keyboard
        )
        await bot.answer_callback_query(callback.id)

    except Exception as e:
        await bot.send_message(
            callback.message.chat.id,
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n<code>{e}</code>",
            parse_mode="HTML"
        )
        raise e
# endregion


async def shutdown():
    await bot.session.close()
    tasks = [t for t in all_tasks() if t is not current_task()]
    for task in tasks:
        task.cancel()
        try:
            await task
        except CancelledError:
            pass


def signal_handler():
    loop = get_event_loop()
    for sig in (SIGINT, SIGTERM):
        loop.add_signal_handler(sig, lambda: create_task(shutdown()))


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    signal_handler()

    background_task = create_task(rate_update_loop())

    try:
        await dp.start_polling(bot)
    except CancelledError:
        pass
    finally:
        background_task.cancel()
        try:
            await background_task
        except CancelledError:
            pass
        await shutdown()


if __name__ == '__main__':
    try:
        async_run(main())
    except CancelledError:
        pass
